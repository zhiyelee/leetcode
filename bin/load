#! /usr/bin/env node
'use strict';
const request = require('request');
const cheerio = require('cheerio');
const fs = require('fs');
const camelCase = require('camelcase');
const mkdirp = require('mkdirp');
const url = require('url');
const path = require('path');
const chalk = require('chalk');

const problemUrl = process.argv[3];

request.get(problemUrl, (err, response, body) => {

  const $ = cheerio.load(body);

  const title = $('title').text().split('|')[0];
  let content = $('meta[name=description]').attr('content');

  // problem slug, such as `combination-sum`
  const slug = url.parse(problemUrl).pathname.split('/')[2];
  const dirPath = path.resolve('js', camelCase(slug));
  content = content.replace(/(\r\n|\r|\n)/gm, '\n');

  mkdirp(dirPath, function () {
    const fileContent = `## ${title}\n` + `link: <${problemUrl}>\n` + `${content}`;

    createFile(path.resolve(dirPath,'README.md'), fileContent);
    createFile(path.resolve(dirPath,`${slug}.js`), '');
  });
});

// create file with content only when file is not exists
function createFile(f, content) {
  fs.access(f, (err) => {
    const relativePath = chalk.green(path.relative(__dirname + '/../', f));
    if (err) {
      fs.writeFileSync(f, content);
      console.log(`Create:\n\t ${relativePath}`);
      return;
    }

    console.log(`${chalk.red.bold('File already exists:')}\n\t ${relativePath}`);
  })
}
